package ${package}.controller;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import ${package}.entity.${className}Entity;
import ${package}.service.${className}Service;
import com.see.common.utils.PageUtils;
import com.see.common.utils.Query;
import com.see.common.utils.R;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;



/**
 * ${comments}
 * 
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Api(value = "${comments}", tags = "${comments}")
@RestController
@RequestMapping("${pathName}")
public class ${className}Controller extends BaseController{
	@Autowired
	private ${className}Service ${classname}Service;
	
	/**
	 * 列表
	 */
	@ApiOperation(value = "获取列表", notes = "获取列表", produces = "application/json")
	@GetMapping(value = "list",produces = {"application/json;charset=UTF-8"})
	public PageBean<${className}ResultVo> list(${className}SearchVo searchVo ){
		PageBean<${className}ResultVo> pageBean = null;
		logger.info("查看XX列表{}",JSON.toJSON(searchVo));
		try{
			//查询列表数据
			pageBean = ${classname}Service.queryList(searchVo);
		}catch(Exception e){
			logger.error("查看XX列表失败",e);
		}
		return pageBean;
	}
	
	
	/**
	 * 信息
	 */
	@ApiOperation(value = "查看详细信息", notes = "查看详细信息", produces = "application/json")
	@GetMapping(value ="info/{${pk.attrname}}",produces = {"application/json;charset=UTF-8"})
	public Response<${className}ResultVo> info(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}){
		logger.info("查看详细信息");
		Response<${className}ResultVo> response = new Response<>();
		try{
			response = ${classname}Service.query${className}Info(id);
			logger.info("查看ID为{}XX详情成功",id);
			response.setCode(HttpStatus.SC_OK);
			response.setMsg("查看XX详情成功");
		}catch(Exception e){
			response.setMsg("查看XX详情失败");
			logger.error("查看ID为{}XX详情失败:{}",id,e);
		}
		return response;
	}
	
	/**
	 * 保存
	 */
	@ApiOperation(value = "保存", notes = "保存", produces = "application/json")
	@PostMapping(value ="save",produces = {"application/json;charset=UTF-8"})
	public Response<String> save(${className}SaveVo saveVo){
		Response<String> response = new Response<>();
		try{
			${classname}Service.save(getUser(),saveVo);
			logger.info("保存成功"+JSON.toJSONString(saveVo));
			response.setMsg("保存成功");
			response.setCode(HttpStatus.SC_OK);
		}catch(Exception e){
			logger.error("保存失败",e);
			response.setMsg("保存失败");
		}
		return response;
	}
	
	/**
	 * 修改
	 */
	@ApiOperation(value = "修改", notes = "修改", produces = "application/json")
	@PostMapping(value ="update",produces = {"application/json;charset=UTF-8"})
	public Response<String> update(${className}UpdateVo updateVo){
		Response<String> response = new Response();
		if(updateVo.getId() == null){
			response.setMsg("XXID不能为空");
			response.setCode(HttpStatus.SC_INTERNAL_SERVER_ERROR);
			return response;
		}
		logger.info("修改XX"+JSON.toJSONString(updateVo));
		try{
			${className}Entity ${classname}Entity = ${classname}Service.queryObject(updateVo.getId());
			if(${classname}Entity == null){
				response.setMsg("该XX不存在");
				response.setCode(HttpStatus.SC_INTERNAL_SERVER_ERROR);
				return response;
			}
			${classname}Service.update(getUser(),updateVo);
			response.setCode(HttpStatus.SC_OK);
			response.setMsg("修改XX成功");
			logger.info("修改XX成功");
		}catch(Exception e){
			logger.error("修改XX失败",e);
			response.setCode(HttpStatus.SC_INTERNAL_SERVER_ERROR);
			response.setMsg("修改失败");
			return response;
		}
		return response;
	}
	
	/**
	 * 删除
	 */
	@ApiOperation(value = "删除", notes = "删除", produces = "application/json")
	@DeleteMapping(value = "delete", produces = { "application/json;charset=UTF-8" })
	public Response<String> delete(Long[] ids) {
		Response<String> response = new Response<String>();
		logger.info("删除XX"+ids);
		try{
			${classname}Service.deleteBatch(getUser(),ids);
			logger.info("删除XX成功");
			response.setMsg("删除XX成功");
			response.setCode(HttpStatus.SC_OK);
		}catch(Exception e){
			response.setMsg("删除XX失败");
			logger.error("删除XX失败",e);
		}
		return response;
	}
	
}
